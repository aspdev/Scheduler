// <auto-generated />
using System;
using Client.Torun.DataService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Client.Torun.DataService.Migrations
{
    [DbContext(typeof(DataServiceContext))]
    partial class DataServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Client_Torun")
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Client.Torun.DataService.Entities.AdminSettings", b =>
                {
                    b.Property<int>("AdminSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfDoctorsOnDuty");

                    b.HasKey("AdminSettingsId");

                    b.ToTable("tbl_AdminSettings");

                    b.HasData(
                        new
                        {
                            AdminSettingsId = 1,
                            NumberOfDoctorsOnDuty = 2
                        });
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DayOff", b =>
                {
                    b.Property<Guid>("DayOffId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("UserId");

                    b.HasKey("DayOffId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_DayOff");
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DayOffRequest", b =>
                {
                    b.Property<Guid>("DayOffRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("RequestStatus");

                    b.Property<Guid>("UserId");

                    b.HasKey("DayOffRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_DayOffRequest");
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DayOffRequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RequestStatus");

                    b.HasKey("RequestStatusId");

                    b.ToTable("tbl_DayOffRequestStatus");
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.Duty", b =>
                {
                    b.Property<Guid>("DutyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("UserId");

                    b.HasKey("DutyId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Duty");
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DutyRequirement", b =>
                {
                    b.Property<Guid>("DutyRequirementId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("RequiredTotalDutiesInMonth");

                    b.Property<int>("TotalHolidayDuties")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("TotalWeekdayDuties")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId");

                    b.HasKey("DutyRequirementId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_DutyRequirement");
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.SchedulerRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("tbl_SchedulerRole");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = 1
                        });
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("RoleId");

                    b.Property<string>("TokenToResetPassword");

                    b.Property<DateTime?>("TokenToResetPasswordValidFrom");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbl_User");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("855eb0f6-6725-4deb-be76-03a82bcc9168"),
                            Email = "adam@gmail.com",
                            FirstName = "Adam",
                            LastName = "Jones",
                            Password = "123ABCabc",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("028b3ca3-e4af-4af6-8b9e-00e1f3267acf"),
                            Email = "fiona@gmail.com",
                            FirstName = "Fiona",
                            LastName = "Woods",
                            Password = "123ABCabc",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("4504fc59-4eb3-4f80-bfb7-a7bd3675e467"),
                            Email = "george@gmail.com",
                            FirstName = "George",
                            LastName = "Clooney",
                            Password = "123ABCbac",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("5feb44a1-98c6-48b7-a1d2-cb369ca94b96"),
                            Email = "james@gmail.com",
                            FirstName = "James",
                            LastName = "Lincoln",
                            Password = "123ABCabc",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("539aa771-2c56-452b-9748-bb7f5bb24afa"),
                            Email = "martha@gmail.com",
                            FirstName = "Martha",
                            LastName = "Argerich",
                            Password = "123ABCabc",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("b51185d9-9bf7-4fff-ac43-4ac1dbed7a58"),
                            Email = "derek@gmail.com",
                            FirstName = "Derek",
                            LastName = "Banas",
                            Password = "123ABCabc",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = new Guid("24cc6ba3-f0e4-4a9d-95ae-cec96500f298"),
                            Email = "edward@gmail.com",
                            FirstName = "Edward",
                            LastName = "Snowden",
                            Password = "123ABCabc",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DayOff", b =>
                {
                    b.HasOne("Client.Torun.DataService.Entities.User", "User")
                        .WithMany("DaysOff")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DayOffRequest", b =>
                {
                    b.HasOne("Client.Torun.DataService.Entities.User", "User")
                        .WithMany("DayOffRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.Duty", b =>
                {
                    b.HasOne("Client.Torun.DataService.Entities.User", "User")
                        .WithMany("Duties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.DutyRequirement", b =>
                {
                    b.HasOne("Client.Torun.DataService.Entities.User", "User")
                        .WithMany("DutyRequirements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Client.Torun.DataService.Entities.User", b =>
                {
                    b.HasOne("Client.Torun.DataService.Entities.SchedulerRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
